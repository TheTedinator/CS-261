1. How many cost units are spent in the entire process of performing 16 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time new item is added to an already full dynamic array? Now try it for 32 consecutive push operations. As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for push?

   16 Consecutive Push Operations
   | Operation |                                      Cost |
   |-----------+-------------------------------------------|
   |         1 |                                         1 |
   |         2 |                                         1 |
   |         3 |                                         1 |
   |         4 |                                         1 |
   |         5 |                                         1 |
   |         6 |                                         1 |
   |         7 |                                         1 |
   |         8 |                                         1 |
   |         9 |                         (copy 8, add 1) 9 |
   |        10 |                                         1 |
   |        11 |                                         1 |
   |        12 |                                         1 |
   |        13 |                                         1 |
   |        14 |                                         1 |
   |        15 |                                         1 |
   |        16 |                                         1 |
   |           | Total Cost: 24; Average Cost: 24/16 = 1.5 |

   32 Consecutive Push Operations
   | Operation |                                       Cost |
   |-----------+--------------------------------------------|
   |         1 |                                          1 |
   |         2 |                                          1 |
   |         3 |                                          1 |
   |         4 |                                          1 |
   |         5 |                                          1 |
   |         6 |                                          1 |
   |         7 |                                          1 |
   |         8 |                                          1 |
   |         9 |                            (copy 8 add 1)9 |
   |        10 |                                          1 |
   |        11 |                                          1 |
   |        12 |                                          1 |
   |        13 |                                          1 |
   |        14 |                                          1 |
   |        15 |                                          1 |
   |        16 |                                          1 |
   |        17 |                         (copy 16, add 1)17 |
   |        18 |                                          1 |
   |        19 |                                          1 |
   |        20 |                                          1 |
   |        21 |                                          1 |
   |        22 |                                          1 |
   |        23 |                                          1 |
   |        24 |                                          1 |
   |        25 |                                          1 |
   |        26 |                                          1 |
   |        27 |                                          1 |
   |        28 |                                          1 |
   |        29 |                                          1 |
   |        30 |                                          1 |
   |        31 |                                          1 |
   |        32 |                                          1 |
   |           | Total Cost: 56; Average Cost: 56/32 = 1.75 |

   Both are O(1^{+}).

2. How many cost units are spent in the entire process of performing 16 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time new item is added to an already full dynamic array? Now try it for 32 consecutive push operations. As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for push?

   16 Consecutive Push Operations
   | Operation |                                       Cost |
   |-----------+--------------------------------------------|
   |         1 |                                          1 |
   |         2 |                                          1 |
   |         3 |                                          1 |
   |         4 |                                          1 |
   |         5 |                                          1 |
   |         6 |                                          1 |
   |         7 |                                          1 |
   |         8 |                                          1 |
   |         9 |                          (copy 8, add 1) 9 |
   |        10 |                                          1 |
   |        11 |                        (copy 10, add 1) 11 |
   |        12 |                                          1 |
   |        13 |                        (copy 12, add 1) 13 |
   |        14 |                                          1 |
   |        15 |                        (copy 14, add 1) 15 |
   |        16 |                                          1 |
   |           | Total Cost: 60; Average Cost: 60/16 = 3.75 |

   32 Consecutive Push Operations
   | Operation |                                          Cost |
   |-----------+-----------------------------------------------|
   |         1 |                                             1 |
   |         2 |                                             1 |
   |         3 |                                             1 |
   |         4 |                                             1 |
   |         5 |                                             1 |
   |         6 |                                             1 |
   |         7 |                                             1 |
   |         8 |                                             1 |
   |         9 |                             (copy 8, add 1) 9 |
   |        10 |                                             1 |
   |        11 |                           (copy 10, add 1) 11 |
   |        12 |                                             1 |
   |        13 |                           (copy 12, add 1) 13 |
   |        14 |                                             1 |
   |        15 |                           (copy 14, add 1) 15 |
   |        16 |                                             1 |
   |        17 |                           (copy 16, add 1) 17 |
   |        18 |                                             1 |
   |        19 |                           (copy 18, add 1) 19 |
   |        20 |                                             1 |
   |        21 |                           (copy 20, add 1) 21 |
   |        22 |                                             1 |
   |        23 |                           (copy 22, add 1) 23 |
   |        24 |                                             1 |
   |        25 |                           (copy 24, add 1) 25 |
   |        26 |                                             1 |
   |        27 |                           (copy 26, add 1) 27 |
   |        28 |                                             1 |
   |        29 |                           (copy 28, add 1) 29 |
   |        30 |                                             1 |
   |        31 |                           (copy 30, add 1) 31 |
   |        32 |                                             1 |
   |           | Total Cost: 260; Average Cost: 260/32 = 8.125 |

   Both are O(n^{+}).

3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the initial capacity of the array is N/2.)

   To get bad performance (O(n^2) total cost) you push until the stack is full, and push once more, then immediately pop. This causes the stack to double, and then immediately shrink by half (resulting in two consecutive complete copies of the full array). This can be corrected by adjusting pop's shrink policy to only shrink when the array shrinks below 1/3 of it's capacity (this is basically adjusting the trigger point for the shrink).
